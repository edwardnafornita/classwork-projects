
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Mar 03 14:04:59 EST 2023
//----------------------------------------------------


/** CUP v0.10k generated parser.
  * @version Fri Mar 03 14:04:59 EST 2023
  */
public class A3Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public A3Parser() {super();}

  /** Constructor which sets the default scanner. */
  public A3Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\021\003\000\002\002\004\000\002\021" +
    "\004\000\002\016\011\000\002\016\010\000\002\006\002" +
    "\000\002\006\003\000\002\006\005\000\002\007\004\000" +
    "\002\010\005\000\002\020\003\000\002\020\004\000\002" +
    "\012\005\000\002\012\004\000\002\005\006\000\002\005" +
    "\006\000\002\013\005\000\002\004\013\000\002\004\013" +
    "\000\002\014\011\000\002\015\011\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\006\000\002\003\003\000\002\003\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\017\002\000\002\017\005\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\004\026\004\001\002\000\006\022\011\030" +
    "\012\001\002\000\006\002\007\026\004\001\002\000\006" +
    "\002\001\026\001\001\002\000\004\002\000\001\002\000" +
    "\006\002\uffff\026\uffff\001\002\000\004\030\133\001\002" +
    "\000\004\011\013\001\002\000\010\012\ufffc\025\ufffc\026" +
    "\014\001\002\000\004\030\132\001\002\000\006\012\020" +
    "\025\017\001\002\000\006\012\ufffb\025\ufffb\001\002\000" +
    "\004\026\014\001\002\000\004\020\022\001\002\000\006" +
    "\002\ufffd\026\ufffd\001\002\000\020\013\033\014\023\015" +
    "\031\017\035\020\022\026\026\030\034\001\002\000\004" +
    "\011\123\001\002\000\022\013\033\014\023\015\031\017" +
    "\035\020\022\021\122\026\026\030\034\001\002\000\024" +
    "\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\026\uffdf\030\uffdf\001\002\000\004\030\116\001\002" +
    "\000\024\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020" +
    "\uffe0\021\uffe0\026\uffe0\030\uffe0\001\002\000\024\013\uffe3" +
    "\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\026" +
    "\uffe3\030\uffe3\001\002\000\004\011\077\001\002\000\022" +
    "\013\ufff7\014\ufff7\015\ufff7\017\ufff7\020\ufff7\021\ufff7\026" +
    "\ufff7\030\ufff7\001\002\000\004\011\071\001\002\000\004" +
    "\027\064\001\002\000\006\030\043\031\042\001\002\000" +
    "\024\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1" +
    "\021\uffe1\026\uffe1\030\uffe1\001\002\000\024\013\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\026\uffe5" +
    "\030\uffe5\001\002\000\024\013\uffe4\014\uffe4\015\uffe4\016" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\026\uffe4\030\uffe4\001\002" +
    "\000\024\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\026\uffe2\030\uffe2\001\002\000\024\004\uffe6" +
    "\005\uffe6\006\uffe6\007\uffe6\012\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\030\uffe6\001\002\000\026\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\011\056\012\uffe7\023\uffe7\024\uffe7\025\uffe7\030" +
    "\uffe7\001\002\000\014\004\046\005\047\006\051\007\050" +
    "\024\045\001\002\000\024\013\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\026\ufff1\030\ufff1\001\002" +
    "\000\006\030\043\031\042\001\002\000\006\030\043\031" +
    "\042\001\002\000\006\030\043\031\042\001\002\000\006" +
    "\030\043\031\042\001\002\000\024\004\uffea\005\uffea\006" +
    "\uffea\007\uffea\012\uffea\023\uffea\024\uffea\025\uffea\030\uffea" +
    "\001\002\000\024\004\uffe9\005\uffe9\006\uffe9\007\uffe9\012" +
    "\uffe9\023\uffe9\024\uffe9\025\uffe9\030\uffe9\001\002\000\024" +
    "\004\uffeb\005\uffeb\006\051\007\050\012\uffeb\023\uffeb\024" +
    "\uffeb\025\uffeb\030\uffeb\001\002\000\024\004\uffec\005\uffec" +
    "\006\051\007\050\012\uffec\023\uffec\024\uffec\025\uffec\030" +
    "\uffec\001\002\000\012\012\uffde\025\uffde\030\043\031\042" +
    "\001\002\000\006\012\062\025\061\001\002\000\016\004" +
    "\046\005\047\006\051\007\050\012\uffdc\025\uffdc\001\002" +
    "\000\006\030\043\031\042\001\002\000\024\004\uffe8\005" +
    "\uffe8\006\uffe8\007\uffe8\012\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\030\uffe8\001\002\000\016\004\046\005\047\006\051\007" +
    "\050\012\uffdd\025\uffdd\001\002\000\010\010\065\030\043" +
    "\031\042\001\002\000\004\024\070\001\002\000\014\004" +
    "\046\005\047\006\051\007\050\024\067\001\002\000\024" +
    "\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\026\ufff3\030\ufff3\001\002\000\024\013\ufff2\014\ufff2" +
    "\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\026\ufff2\030" +
    "\ufff2\001\002\000\006\030\043\031\042\001\002\000\014" +
    "\004\046\005\047\006\051\007\050\025\073\001\002\000" +
    "\004\010\074\001\002\000\004\012\075\001\002\000\004" +
    "\024\076\001\002\000\024\013\uffee\014\uffee\015\uffee\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\026\uffee\030\uffee\001\002" +
    "\000\006\030\100\031\042\001\002\000\022\004\uffe7\005" +
    "\uffe7\006\uffe7\007\uffe7\011\056\023\uffe7\030\043\031\042" +
    "\001\002\000\014\004\046\005\047\006\051\007\050\023" +
    "\102\001\002\000\006\030\043\031\042\001\002\000\014" +
    "\004\046\005\047\006\051\007\050\012\104\001\002\000" +
    "\020\013\033\014\023\015\031\017\035\020\022\026\026" +
    "\030\034\001\002\000\004\016\106\001\002\000\020\013" +
    "\033\014\023\015\031\017\035\020\022\026\026\030\034" +
    "\001\002\000\024\013\uffef\014\uffef\015\uffef\016\uffef\017" +
    "\uffef\020\uffef\021\uffef\026\uffef\030\uffef\001\002\000\014" +
    "\004\046\005\047\006\051\007\050\023\111\001\002\000" +
    "\006\030\043\031\042\001\002\000\014\004\046\005\047" +
    "\006\051\007\050\030\113\001\002\000\004\012\114\001" +
    "\002\000\020\013\033\014\023\015\031\017\035\020\022" +
    "\026\026\030\034\001\002\000\024\013\ufff0\014\ufff0\015" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\026\ufff0\030\ufff0" +
    "\001\002\000\006\024\120\027\064\001\002\000\024\013" +
    "\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\026\ufff4\030\ufff4\001\002\000\024\013\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\026\ufff5\030\ufff5" +
    "\001\002\000\022\013\ufff6\014\ufff6\015\ufff6\017\ufff6\020" +
    "\ufff6\021\ufff6\026\ufff6\030\ufff6\001\002\000\026\002\ufff8" +
    "\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021" +
    "\ufff8\026\ufff8\030\ufff8\001\002\000\004\030\124\001\002" +
    "\000\004\025\125\001\002\000\004\010\126\001\002\000" +
    "\004\012\127\001\002\000\004\024\130\001\002\000\024" +
    "\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021" +
    "\uffed\026\uffed\030\uffed\001\002\000\006\012\ufffa\025\ufffa" +
    "\001\002\000\006\012\ufff9\025\ufff9\001\002\000\004\011" +
    "\134\001\002\000\010\012\ufffc\025\ufffc\026\014\001\002" +
    "\000\006\012\136\025\017\001\002\000\004\020\022\001" +
    "\002\000\006\002\ufffe\026\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\006\016\005\021\004\001\001\000\002\001" +
    "\001\000\004\016\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\014\007\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\130\001" +
    "\001\000\004\010\020\001\001\000\002\001\001\000\024" +
    "\004\035\005\027\010\036\011\031\012\037\013\040\014" +
    "\026\015\024\020\023\001\001\000\002\001\001\000\022" +
    "\004\035\005\027\010\036\011\120\012\037\013\040\014" +
    "\026\015\024\001\001\000\002\001\001\000\004\005\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\054\001\001\000\004\003\053\001\001\000\004" +
    "\003\052\001\001\000\004\003\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\057\017\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\100\001\001\000\004\003\107\001\001\000" +
    "\002\001\001\000\004\003\102\001\001\000\002\001\001" +
    "\000\022\004\035\005\027\010\036\011\104\012\037\013" +
    "\040\014\026\015\024\001\001\000\002\001\001\000\022" +
    "\004\035\005\027\010\036\011\106\012\037\013\040\014" +
    "\026\015\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\035\005\027\010\036\011\114\012\037" +
    "\013\040\014\026\015\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\134\007\015\001\001\000\002" +
    "\001\001\000\004\010\136\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$A3Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$A3Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$A3Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$A3Parser$actions {
  private final A3Parser parser;

  /** Constructor */
  CUP$A3Parser$actions(A3Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$A3Parser$do_action(
    int                        CUP$A3Parser$act_num,
    java_cup.runtime.lr_parser CUP$A3Parser$parser,
    java.util.Stack            CUP$A3Parser$stack,
    int                        CUP$A3Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$A3Parser$result;

      /* select the action based on the action number */
      switch (CUP$A3Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // math_parameters ::= expr 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(13/*math_parameters*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // math_parameters ::= math_parameters COMMA expr 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(13/*math_parameters*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // math_parameters ::= 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(13/*math_parameters*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statements ::= read_statement 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(7/*statements*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statements ::= write_statement 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(7/*statements*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statements ::= if_statement 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(7/*statements*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statements ::= return_statement 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(7/*statements*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statements ::= assignment 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(7/*statements*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statements ::= local_variable 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(7/*statements*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statements ::= code_block 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(7/*statements*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= NUMBER 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= IDENTIFIER 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= IDENTIFIER LPAREN math_parameters RPAREN 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr DIVIDE expr 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr TIMES expr 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr MINUS expr 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr PLUS expr 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // read_statement ::= READ LPAREN IDENTIFIER COMMA QUOTEDSTRING RPAREN SEMICOLON 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(11/*read_statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // write_statement ::= WRITE LPAREN expr COMMA QUOTEDSTRING RPAREN SEMICOLON 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(10/*write_statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // if_statement ::= IF LPAREN expr CONDITIONAL expr RPAREN statements ELSE statements 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(2/*if_statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // if_statement ::= IF LPAREN IDENTIFIER expr CONDITIONAL expr IDENTIFIER RPAREN statements 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(2/*if_statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // return_statement ::= RETURN expr SEMICOLON 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(9/*return_statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // assignment ::= IDENTIFIER ASSIGN QUOTEDSTRING SEMICOLON 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(3/*assignment*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // assignment ::= IDENTIFIER ASSIGN expr SEMICOLON 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(3/*assignment*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // local_variable ::= TYPEDEFS assignment 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(8/*local_variable*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // local_variable ::= TYPEDEFS IDENTIFIER SEMICOLON 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(8/*local_variable*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // main_block ::= main_block statements 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(14/*main_block*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // main_block ::= statements 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(14/*main_block*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // code_block ::= BEGIN main_block END 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(6/*code_block*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parameter ::= TYPEDEFS IDENTIFIER 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(5/*parameter*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parameters ::= parameters COMMA parameter 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(4/*parameters*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parameters ::= parameter 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(4/*parameters*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // parameters ::= 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(4/*parameters*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // method_declaration ::= TYPEDEFS IDENTIFIER LPAREN parameters RPAREN code_block 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(12/*method_declaration*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // method_declaration ::= TYPEDEFS MAIN IDENTIFIER LPAREN parameters RPAREN code_block 
            {
              Object RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(12/*method_declaration*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= program method_declaration 
            {
              Integer RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).value;
		 RESULT = e + 1; 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(15/*program*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).right;
		Integer start_val = (Integer)((java_cup.runtime.Symbol) CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).value;
		RESULT = start_val;
              CUP$A3Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$A3Parser$parser.done_parsing();
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= method_declaration 
            {
              Integer RESULT = null;
		 RESULT = 1; 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(15/*program*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

